services:
  backend:
    build: ./app
    command: sh ./entrypoint.sh
    depends_on:
      - postgres
    env_file:
      - ./app/.env
    expose:
      - "8000"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    restart: unless-stopped
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATABASE_USER}", "-d", "${DATABASE_NAME}"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  nginx:
    build: ./nginx
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:80"
    restart: unless-stopped
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  backend_network:
    driver: bridge
